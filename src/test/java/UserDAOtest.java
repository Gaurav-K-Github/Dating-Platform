import static org.junit.jupiter.api.Assertions.*;

import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.user.dao.UserDAO;
import com.user.model.User;
import com.user.model.Gender;

class UserDAOTest {

    private UserDAO userDAO;

    @BeforeEach
    void setUp() {
        userDAO = new UserDAO();
    }

    @Test
    void selectUser_validId_shouldReturnUser() {
        assertNotNull(userDAO.selectUser(1));
    }

    @Test
    void selectUser_invalidId_shouldReturnNull() {
        assertNull(userDAO.selectUser(999));  // Assuming 999 does not exist
    }

    @Test
    void selectAllUsers_shouldReturnNonEmptyList() {
        List<User> users = userDAO.selectAllUsers();
        assertTrue(users.size() > 0);
    }

    @Test
    void insertUser_validUser_shouldInsertSuccessfully() {
        User newUser = new User(
                0,  // ID auto-generated by DB
                "John",
                "Doe",
                "john.doe@example.com",
                "password123",
                LocalDate.of(1995, 5, 15),
                Gender.MALE,
                LocalDate.now()
        );
        assertDoesNotThrow(() -> userDAO.insertUser(newUser));
    }

    @Test
    void deleteUser_existingId_shouldReturnTrue() {
        assertTrue(userDAO.deleteUser(1));  // Assumes user with ID 1 exists
    }

    @Test
    void deleteUser_nonExistingId_shouldReturnFalse() {
        assertFalse(userDAO.deleteUser(999));  // Assuming 999 does not exist
    }

    @Test
    void updateUser_existingUser_shouldUpdateSuccessfully() {
        User existingUser = userDAO.selectUser(1);  // Assumes user with ID 1 exists
        assertNotNull(existingUser);

        existingUser.setFirstName("UpdatedName");
        boolean updated = userDAO.updateUser(existingUser);

        assertTrue(updated);
        assertEquals("UpdatedName", userDAO.selectUser(1).getFirstName());
    }

    @Test
    void updateUser_nonExistingUser_shouldReturnFalse() {
        User nonExistingUser = new User(
                999,  // Assumes this ID does not exist
                "Jane",
                "Doe",
                "jane.doe@example.com",
                "password123",
                LocalDate.of(1990, 1, 1),
                Gender.FEMALE,
                LocalDate.now()
        );
        assertFalse(userDAO.updateUser(nonExistingUser));
    }
}
